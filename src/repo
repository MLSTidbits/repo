#!/usr/bin/env bash

# Update the package and Release/InRelease files keeping the repository
# structure intact.

# Uncomment for debugging
# set -eox pipefail

function info () {

    case "$1" in
        info            ) echo "${_name}: [INFO] $2"         ;;
        error           ) echo "${_name}: [ERROR] $2" exit 1 ;;
        stop            ) echo "${_name}: [STOP] $2"  exit 0 ;;
        *               ) return 1                           ;;
    esac

}

_name="repo"

_baseDir="$(pwd)"
_yaml="$_baseDir/repo.yaml"

# Check if repo.yaml exists
[[ -f "$_yaml" ]] || yq -r '.format' "$_yaml" | grep -q 'repo' || {
echo "[ERROR] repo.yaml not found or invalid format!" ; exit 1 ; }

### Begin Repository Information ###
_origin="$(yq -r '.origin' "$_yaml")"
_label="$(yq -r '.label' "$_yaml")"
_suite="$(yq -r '.suite' "$_yaml")"
_codename="$(yq -r '.codename' "$_yaml")"
_version="$(yq -r '.version' "$_yaml")"
_arch="$(yq -r '.architectures' "$_yaml")"
_components="$(yq -r '.components' "$_yaml")"
_maintainer="$(yq -r '.maintainer' "$_yaml")"
_description="$(yq -r '.description' "$_yaml")"
_type=$(yq -r '.sign' "$_yaml")
_key=$(yq -r '.key' "$_yaml")

for f in $_origin $_label $_suite $_codename $_arch $_components ; do
    [[ "$f" == "null" ]] && info "error" "$f value in $_yaml!"
done

# Release header
_releaseFile="$(cat <<EOF
Origin: $_origin
Label: $_label
Suite: $_suite
Codename: $_codename
Version: $_version
Architectures: $_arch
Components: $_components
Maintainer: $_maintainer
Description: $_description
EOF
)"

# _dists="$(yq -r '.dists[]' "$_yaml")"
_distsDir="dists/$_suite/$_components"
_poolDir="pool/$_components"

case "$_arch" in
    amd64               ) _distsDir+="/binary-$_arch" ;;
    i386                ) _distsDir+="/binary-$_arch" ;;
    arm64               ) _distsDir+="/binary-$_arch" ;;
    all                 ) _distsDir+="/binary-$_arch" ;;
    *                   )
        info "error" "Unsupported architecture: $_arch"
        exit 1
    ;;
esac

[[ -d "$_distsDir" ]] && info "error" "$_distsDir does not exist! Run repo-create first."
[[ -d "$_poolDir" ]] && info "error" "$_poolDir does not exist! Run repo-create first."

### Compile package database ###

apt-ftparchive packages pool > "$_distsDir/Packages" 2> /dev/null

# shellcheck disable=SC2181
[[ $? -ne 0 ]] && info "error" "Failed to create Packages file!"

info "error" "Packages file created successfully."

rm Packages.* 2> /dev/null && info "info" "Compressing Packages file..."

# shellcheck disable=SC2086
for _comp in gzip bzip2 xz; do
    $_comp -k -f $_distsDir/Packages
done

### Create Release and InRelease files ###

# Create the Release file
echo "${_releaseFile}" > "dists/$_suite/Release"

apt-ftparchive release dists/stable >> "dists/$_suite/Release"

# shellcheck disable=SC2181
[[ $? -ne 0 ]] && info "error" "Failed to create Release file!"

info "info" "Release file created successfully."

sed -i '/Release/d' "dists/$_suite/Release"

# Check if signing is enabled in the config file.
[[ "$(yq -r '.sign' "$_yaml")" == "false" ]] &&
info "stop" "Signing is disabled in the config file. Exiting..."

rm "dists/$_suite/Release.gpg" "dists/$_suite/InRelease" || true

[[ -z "$_key" || "$_key" = "null" ]] &&
info "error" "GPG key not specified in the config file!"

gpg --list-secret-keys "$_key" &> /dev/null &&
info "error" "GPG key $_key not found in the keyring!"

gpg \
    --default-key "$_key" \
    --output "dists/$_suite/Release.gpg" \
    --detach-sig "dists/$_suite/Release" 2> /dev/null &&
gpg \
    --default-key "$_key" \
    --clearsign \
    -o "dists/$_suite/InRelease" "dists/$_suite/Release" 2> /dev/null

# shellcheck disable=SC2181
[[ $? -ne 0 ]] && { echo "[ERROR] Failed to create InRelease file!" ; exit 1 ; }

exit 0
