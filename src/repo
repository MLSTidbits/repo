#!/usr/bin/env bash

# Update the package and Release/InRelease files keeping the repository
# structure intact.

function do_hash () {

    local hashName hashCmd

    hashName=$1 ; hashCmd=$2

    echo "${hashName}:"

    find ./main -type f | while read -r f ; do
        f=$(echo "${f}" | cut -c3-)
        test "${f}" != "Release" || continue
        echo " $(${hashCmd} "${f}"  | cut -d" " -f1) $(wc -c "${f}")"
    done
}

# Uncomment for debugging
set -eox pipefail

baseDir="$(pwd)"

_editor="${EDITOR:-nano}"

# Check if the config.yaml file exists and create it if it doesn't.
[ -f "${baseDir}/config.yaml" ] || {
cp -a /usr/share/dpkg-archive/config.yaml "${baseDir}/config.yaml"
${_editor} "${baseDir}/config.yaml" ; exit 0 ; }

### Begin GPG signing information ###
_enable="$(yq '.key.enable' "${baseDir}/config.yaml" | tr -d '"' || echo "true")"
_key="$(yq '.key.name' "${baseDir}/config.yaml" | tr -d '"')"

### Begin Release Information ###
_origin="$(yq '.release.origin' "${baseDir}/config.yaml" | tr -d '"')"
_label="$(yq '.release.label' "${baseDir}/config.yaml" | tr -d '"' || echo "default")"
_suite="$(yq '.release.suite' "${baseDir}/config.yaml" | tr -d '"' || echo "stable")"
_codename="$(yq '.release.codename' "${baseDir}/config.yaml" | tr -d '"' || echo "$_suite")"

# Set the architecture from the config file or fallback to dpkg's default
# architecture if not specified.
_arch="$(yq '.release.architectures' "${baseDir}/config.yaml" | tr -d '"' ||
dpkg --print-architecture)"

_components="$(yq '.release.components' "${baseDir}/config.yaml" | tr -d '"' || echo "main")"
_description="$(yq '.release.description' "${baseDir}/config.yaml" | tr -d '"' ||
echo "No description provided")"

# Maintainer information
_maintainerName="$(yq '.maintainer.name' "${baseDir}/config.yaml" | tr -d '"' || whoami)"
_maintainerEmail="$(yq '.maintainer.email' "${baseDir}/config.yaml" | tr -d '"' ||
echo "<$(whoami)@$(hostname -f)>")"

# All fields for the Release variable should be set now, but check if any are empty
[ -n "$_origin" ] || { echo "Origin is not set in config.yaml"; exit 1; }

# Release header
releaseFile="$(cat <<EOF
Origin: ${_origin}
Label: ${_label}
Suite: ${_suite}
Codename: ${_codename}
Version: 1.0
Architectures: ${_arch}
Components: ${_components}
Description: ${_description}
Maintainer: ${_maintainerName} <${_maintainerEmail}>
date: $(date -Ru)
EOF
)"

# Rebuild the Packages file
dpkg-scanpackages --arch amd64 pool/ > dists/stable/main/binary-amd64/Packages || {
    echo "Failed to rebuild the Packages file"
    exit 1
}

# Compress the Packages file into a gz file and xz file
cd "${baseDir}/dists/stable/main/binary-amd64"

gzip -k -f Packages
xz -k -f Packages

# Create the Release file
cd "${baseDir}/dists/stable"

if [ "$_enable" = "true" ] ; then
# Remove the old Release.gpg and InRelease files
rm -vf Release.gpg InRelease

# Create the Release file
echo "${releaseFile}" > Release

# Add hashes to the Release file
{
    do_hash "MD5Sum" "md5sum"
    do_hash "SHA1" "sha1sum"
    do_hash "SHA256" "sha256sum"
} >> Release

    # Sign the Release file with GPG
    if [ -z "$_key" ]; then
        echo "No GPG key specified in config.yaml. Please set 'key.gpg.name' to your GPG key."
        exit 1
    fi

    gpg --default-key "$_key" --output Release.gpg --detach-sig Release 2> /dev/null
    gpg --default-key "$_key" --clearsign -o InRelease Release 2> /dev/null

    echo "Signed Release and InRelease files with GPG key: ${_key}"
else
    echo "GPG signing is disabled in config.yaml."
fi

exit 0
