#!/usr/bin/env bash

# Update the package and Release/InRelease files keeping the repository
# structure intact.

function do_hash () {

    local hashName hashCmd

    hashName=$1 ; hashCmd=$2

    echo "${hashName}:"

    find ./main -type f | while read -r f ; do
        f=$(echo "${f}" | cut -c3-)
        test "${f}" != "Release" || continue
        echo " $(${hashCmd} "${f}"  | cut -d" " -f1) $(wc -c "${f}")"
    done
}

# Uncomment for debugging
# set -eox pipefail

_name="repo"

_baseDir="$(pwd)"
_yaml="$_baseDir/src/example.yaml"

# Check if config.yaml exists
[[ -f "$_yaml" ]] || { echo "[ERROR] config.yaml not found in $_baseDir!" ; exit 1 ; }

yq -r '.format' "$_yaml" | grep -q 'yaml' || {
echo "[ERROR] config.yaml is not a valid YAML file!" ; exit 1 ; }

### Begin Repository Information ###
_origin="$(yq '.origin' "$_yaml")"
_label="$(yq '.label' "$_yaml")"
_suite="$(yq '.suite' "$_yaml")"
_codename="$(yq '.codename' "$_yaml")"
_arch="$(yq '.architectures' "$_yaml")"
_components="$(yq '.components' "$_yaml")"
_description="$(yq '.description' "$_yaml")"
_maintainer=""

mapfile -t _maintainers < <(yq '.maintainer[]' "$_yaml")

for maintainer in "${_maintainers[@]}" ; do
    [[ -z "$maintainer" || "$maintainer" = "null" ]] && break
    _maintainer+="$maintainer, "
done

_maintainer="${_maintainer%, }"

for field in $_origin $_label $_suite $_codename $_arch $_components ; do
    [[ "${field}" = "null" ]] && {
    echo "$_name - [ERROR] $field value in $_yaml!" ; exit 1 ; }
done

# Release header
releaseFile="$(cat <<EOF
Origin: ${_origin}
Label: ${_label}
Suite: ${_suite}
Codename: ${_codename}
Version: 1.0
Architectures: ${_arch}
Components: ${_components}
Description: ${_description}
Maintainer: ${_maintainerName} <${_maintainerEmail}>
date: $(date -Ru)
EOF
)"

# Rebuild the Packages file
dpkg-scanpackages --arch amd64 pool/ > dists/stable/main/binary-amd64/Packages || {
    echo "Failed to rebuild the Packages file"
    exit 1
}

# Compress the Packages file into a gz file and xz file
cd "${baseDir}/dists/stable/main/binary-amd64"

gzip -k -f Packages
xz -k -f Packages

# Create the Release file
cd "${baseDir}/dists/stable"

if [ "$_enable" = "true" ] ; then
# Remove the old Release.gpg and InRelease files
rm -vf Release.gpg InRelease

# Create the Release file
echo "${releaseFile}" > Release

# Add hashes to the Release file
{
    do_hash "MD5Sum" "md5sum"
    do_hash "SHA1" "sha1sum"
    do_hash "SHA256" "sha256sum"
} >> Release

    # Sign the Release file with GPG
    if [ -z "$_key" ]; then
        echo "No GPG key specified in config.yaml. Please set 'key.gpg.name' to your GPG key."
        exit 1
    fi

    gpg --default-key "$_key" --output Release.gpg --detach-sig Release 2> /dev/null
    gpg --default-key "$_key" --clearsign -o InRelease Release 2> /dev/null

    echo "Signed Release and InRelease files with GPG key: ${_key}"
else
    echo "GPG signing is disabled in config.yaml."
fi

exit 0
