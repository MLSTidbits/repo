#!/usr/bin/env bash

# Update the package and Release/InRelease files keeping the repository
# structure intact.

# Uncomment for debugging
# set -eox pipefail

_name="repo"

_baseDir="$(pwd)"
_yaml="$_baseDir/repo.yaml"

# Check if repo.yaml exists
[[ -f "$_yaml" ]] || yq -r '.format' "$_yaml" | grep -q 'repo' || {
echo "[ERROR] repo.yaml not found or invalid format!" ; exit 1 ; }

### Begin Repository Information ###
_origin="$(yq -r '.origin' "$_yaml")"
_label="$(yq -r '.label' "$_yaml")"
_suite="$(yq -r '.suite' "$_yaml")"
_codename="$(yq -r '.codename' "$_yaml")"
_version="$(yq -r '.version' "$_yaml")"
_arch="$(yq -r '.architectures' "$_yaml")"
_components="$(yq -r '.components' "$_yaml")"
_maintainer="$(yq -r '.maintainer' "$_yaml")"
_description="$(yq -r '.description' "$_yaml")"

for f in $_origin $_label $_suite $_codename $_arch $_components ; do
    [[ "$f" == "null" ]] && {
    echo "$_name - [ERROR] $f value in $_yaml!" ; exit 1 ; }
done

# Release header
_releaseFile="$(cat <<EOF
Origin: $_origin
Label: $_label
Suite: $_suite
Codename: $_codename
Version: $_version
Architectures: $_arch
Components: $_components
Maintainer: $_maintainer
Description: $_description
EOF
)"

# _dists="$(yq -r '.dists[]' "$_yaml")"
_distsDir="dists/$_suite/$_components"

case "$_arch" in
    amd64           ) _distsDir+="/binary-$_arch" ;;
    i386            ) _distsDir+="/binary-$_arch" ;;
    arm64           ) _distsDir+="/binary-$_arch" ;;
    all             ) _distsDir+="/binary-$_arch" ;;
    *               )
        echo "[ERROR] Unsupported architecture: $_arch" ; exit 1
    ;;
esac

[[ -d "$_distsDir" ]] && echo "[INFO] Compatible dists directory structure"

apt-ftparchive packages pool > "$_distsDir/Packages" || {
echo "[ERROR] Failed to create Packages file!" ; exit 1 ; }

cd "$_distsDir" || exit 1

rm Packages.* || true

for _comp in gzip bzip2 xz; do
    $_comp -k -f Packages
done

cd - > /dev/null || exit 1

# Create the Release file
echo "${_releaseFile}" > "dists/$_suite/Release"

apt-ftparchive release dists/stable >> "dists/$_suite/Release" || {
echo "[ERROR] Failed to create Release file!" ; exit 1 ; }

sed -i '/Release/d' "dists/$_suite/Release"

_type=$(yq -r '.sign' "$_yaml")
_key=$(yq -r '.key' "$_yaml")

# Check if signing is enabled in the config file.
[[ "$(yq -r '.sign' "$_yaml")" == "false" ]] && exit 0

rm "dists/$_suite/Release.gpg" "dists/$_suite/InRelease" || true

if [[ -z "$_key" || "$_key" = "null" ]] ; then
    echo "[ERROR] No GPG key fingerprint specified in config.yaml!"
    exit 1
fi

! gpg --list-secret-keys "$_key" &> /dev/null && {
echo "[ERROR] GPG key $_key not found in your keyring!" ; exit 1 ; }

gpg \
    --default-key "$_key" \
    --output "dists/$_suite/Release.gpg" \
    --detach-sig "dists/$_suite/Release" 2> /dev/null
# shellcheck disable=SC2181
[[ $? -ne 0 ]] && { echo "[ERROR] Failed to sign the Release file!" ; exit 1 ; }

gpg \
    --default-key "$_key" \
    --clearsign \
    -o "dists/$_suite/InRelease" "dists/$_suite/Release" 2> /dev/null
# shellcheck disable=SC2181
[[ $? -ne 0 ]] && { echo "[ERROR] Failed to create InRelease file!" ; exit 1 ; }

exit 0
